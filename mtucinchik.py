import telebot
from telebot import types
import sqlite3
import random

bot = telebot.TeleBot("YOUR TOKEN")

def start_markup():
    markup = types.InlineKeyboardMarkup(row_width=True)
    link_keyboard = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/mtucinchik")
    check_keyboard = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check")
    markup.add(link_keyboard, check_keyboard)
    return markup

def admin_markup():
    markup = types.InlineKeyboardMarkup(row_width=3)
    mailing_keyboard = types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="mailing")
    markup.add(mailing_keyboard)
    return markup
    

def proverka_markup():
    markupp = types.InlineKeyboardMarkup(row_width=True)
    link_keyboard = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/mtucinchik")
    check_keyboard = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="–ø—Ä–æ–≤–µ—Ä–∏—Ç—å")
    markupp.add(link_keyboard, check_keyboard)
    return markupp

def start_markup2():
    markup2 = types.InlineKeyboardMarkup(row_width=True)
    btn1 = types.InlineKeyboardButton(text="–ü–∞—Ä–Ω–∏", callback_data="–ø–∞—Ä–Ω–∏")
    btn2 = types.InlineKeyboardButton(text="–î–µ–≤—É—à–∫–∏", callback_data="–¥–µ–≤—É—à–∫–∏")
    btn3 = types.InlineKeyboardButton(text="–í—Å–µ —Ä–∞–≤–Ω–æ", callback_data="–≤—Å–µ —Ä–∞–≤–Ω–æ")
    markup2.add(btn1, btn2, btn3)
    return markup2


def start_markup22():
    markup22 = types.InlineKeyboardMarkup(row_width=True)
    btn122 = types.InlineKeyboardButton(text="–ü–∞—Ä–Ω–∏", callback_data="–ø–∞—Ä–Ω–∏2")
    btn222 = types.InlineKeyboardButton(text="–î–µ–≤—É—à–∫–∏", callback_data="–¥–µ–≤—É—à–∫–∏2")
    btn322 = types.InlineKeyboardButton(text="–í—Å–µ —Ä–∞–≤–Ω–æ", callback_data="–≤—Å–µ —Ä–∞–≤–Ω–æ2")
    markup22.add(btn122, btn222, btn322)
    return markup22


def start_markup3():
    markup3 = types.InlineKeyboardMarkup(row_width=True)
    btn11 = types.InlineKeyboardButton(text="–Ø –ø–∞—Ä–µ–Ω—å", callback_data='–ø–æ–ª1')
    btn12 = types.InlineKeyboardButton(text="–Ø –¥–µ–≤—É—à–∫–∞", callback_data='–ø–æ–ª2')
    markup3.add(btn11, btn12)
    return markup3


def start_markup4():
    markup4 = types.InlineKeyboardMarkup(row_width=True)
    btn13 = types.InlineKeyboardButton(text="–î–∞", callback_data='–¥–∞')
    btn14 = types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É", callback_data='–ø—Ä–æ—Å–º–æ—Ç—Ä–∞–Ω–∫–µ—Ç—ã')
    btn15 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data='–Ω–æ–≤–∞–Ω–∫–µ—Ç–∞')
    markup4.add(btn13, btn14, btn15)
    return markup4


def start_markup5():
    markup5 = types.InlineKeyboardMarkup(row_width=True)
    btn16 = types.InlineKeyboardButton(text="–í—Å–µ –≤–µ—Ä–Ω–æ!", callback_data='–≤–µ—Ä–Ω–æ')
    btn17 = types.InlineKeyboardButton(text="–ù–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Å—å –∑–∞–Ω–æ–≤–æ", callback_data='–Ω–æ–≤—Ä–µ–≥')
    markup5.add(btn16, btn17)
    return markup5


def start_markup6():
    markup6 = types.InlineKeyboardMarkup(row_width=True)
    btn61 = types.InlineKeyboardButton(text="–Ø –ø–∞—Ä–µ–Ω—å", callback_data='–ø–æ–ª3')
    btn62 = types.InlineKeyboardButton(text="–Ø –¥–µ–≤—É—à–∫–∞", callback_data='–ø–æ–ª4')
    markup6.add(btn61, btn62)
    return markup6


def start_markup7():
    markup7 = types.InlineKeyboardMarkup(row_width=True)
    btn71 = types.InlineKeyboardButton(text="–ü–∞—Ä–Ω–∏", callback_data="–ø–∞—Ä–Ω–∏1")
    btn72 = types.InlineKeyboardButton(text="–î–µ–≤—É—à–∫–∏", callback_data="–¥–µ–≤—É—à–∫–∏1")
    btn73 = types.InlineKeyboardButton(text="–í—Å–µ —Ä–∞–≤–Ω–æ", callback_data="–≤—Å–µ —Ä–∞–≤–Ω–æ1")
    markup7.add(btn71, btn72, btn73)
    return markup7

def start_anketa():
    markup8 = types.InlineKeyboardMarkup(row_width=True)
    btn1 = types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã", callback_data="–º–æ—è–∞–Ω–∫–µ—Ç–∞")
    btn2 = types.InlineKeyboardButton(text="–û—Ü–µ–Ω–∫–∞ —á—É–∂–∏—Ö –∞–Ω–∫–µ—Ç", callback_data="–æ—Ü–µ–Ω–∫–∞")
    markup8.add(btn1, btn2)
    return markup8

def grade_anketa():
    markup9 = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton(text="üëç", callback_data="–ª–∞–π–∫")
    btn2 = types.InlineKeyboardButton(text="üëé", callback_data="–¥–∏–∑–ª–∞–π–∫")
    markup9.add(btn1, btn2)
    return markup9

def grade_anketa1():
    markup10 = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton(text="üëç", callback_data="üëç")
    btn2 = types.InlineKeyboardButton(text="üëé", callback_data="üëé")
    btn3 = types.InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç", callback_data="–æ—Ü–µ–Ω–∫–∞")
    markup10.add(btn1, btn2)
    markup10.add(btn3)
    return markup10

def vzanketa():
    markup11 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª–∏")
    markup11.add(btn1)
    return markup11

def vzanketa1():
    markup12 = types.InlineKeyboardMarkup(row_width=True)
    btn1 = types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã", callback_data="–º–æ—è–∞–Ω–∫–µ—Ç–∞")
    btn2 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="–Ω–æ–≤–∞–Ω–∫–µ—Ç–∞")
    btn3 = types.InlineKeyboardButton(text="–û—Ü–µ–Ω–∫–∞ —á—É–∂–∏—Ö –∞–Ω–∫–µ—Ç", callback_data="–æ—Ü–µ–Ω–∫–∞")
    markup12.add(btn1, btn2, btn3)
    return markup12

def dlya_moya_anketa():
    markup13 = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="–Ω–æ–≤–∞–Ω–∫–µ—Ç–∞")
    btn2 = types.InlineKeyboardButton(text="–û—Ü–µ–Ω–∫–∞ —á—É–∂–∏—Ö –∞–Ω–∫–µ—Ç", callback_data="–æ—Ü–µ–Ω–∫–∞")
    markup13.add(btn1, btn2)
    return markup13

def mailing(message):
    if message.text:
        message = message.text
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("SELECT * FROM login_id")
        login = [item[0] for item in cursor.fetchall()]
        connect.close()
        for i in login:
            bot.send_message(i, f"{message}", parse_mode='html')
    elif message.photo:
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS mailing_id(id INTEGER, photo BLOB)""")
        connect.commit()
        file_i = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_i.file_path)
        cursor.execute("INSERT INTO mailing_id VALUES(?, ?);", (message.chat.id, downloaded_file))
        connect.commit()
        bug = bot.send_message(message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –æ–Ω –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –ø–æ–¥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π\
            \n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '<code>0</code>'", parse_mode='html')
        bot.register_next_step_handler(bug, photo_mal)
    
def photo_mal(message):
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()
    cursor.execute(f"SELECT photo FROM mailing_id WHERE id = {message.chat.id}")
    data_photo = cursor.fetchone()
    if data_photo is not None: #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –ø–æ –∞–π–¥–∏
        photo_data = data_photo[0] #—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ –±–¥
        if message.text == str(0):
            cursor.execute("SELECT * FROM login_id")
            login = [item[0] for item in cursor.fetchall()]
            for i in login:
                bot.send_photo(i, photo = photo_data)
        else:
            message = message.text
            cursor.execute("SELECT * FROM login_id")
            login = [item[0] for item in cursor.fetchall()]
            connect.close()
            for i in login:
                bot.send_photo(i, photo = photo_data, caption = message, parse_mode='html')

    
@bot.message_handler(commands=['start'])
def start(message):
    first_name = message.chat.first_name
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
        id INTEGER
    )""")
    connect.commit()
    # check id in fields
    people_id = message.chat.id
    cursor.execute(f"SELECT id FROM login_id WHERE id = {people_id}")
    data = cursor.fetchone()
    if data is None:
        # add values in fields
        user_id = [message.chat.id]
        cursor.execute("INSERT INTO login_id VALUES(?);", user_id)
        connect.commit()
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç {first_name}!\n'
                                        f'–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!',
                        reply_markup=start_markup())
    elif data is not None:
        cursor.execute(f"SELECT id FROM photo_id WHERE id = {people_id}")
        data1 = cursor.fetchone()
        if data1 is None:
            bot.send_message(message.chat.id,f'{first_name}, –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
            connect.close()
            restart(message)
        else:
            bot.send_message(message.chat.id, '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n'
                                            '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
                            reply_markup=start_markup4())  # –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–æ–≤–æ–π –∏–ª–∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ
            connect.close()

@bot.message_handler(commands=['admin'])
def admin(message):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'administrator' or 'creator':
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º—Ç—É—Å–∏–Ω—á–∏–∫–∞!", reply_markup=admin_markup())
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        

def check3(call):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status == 'member' or 'administrator' or 'creator':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute(f"SELECT years_id.years, sex_id.sex, name_id.name FROM name_id \
                INNER JOIN years_id ON name_id.id = years_id.id \
                    INNER JOIN sex_id ON name_id.id = sex_id.id \
                        WHERE name_id.id = {call.message.chat.id}")
        data_text = cursor.fetchone() #–º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü –±–¥
        if data_text is not None:
            years, sex, name = data_text
            bot.send_message(call.message.chat.id, f'–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ–º–µ–Ω—è–µ–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É\n\
    –ö–∞–∫ –Ω–∞–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, —Ç—ã {sex}\n\
    –¢–µ–±—è –∑–æ–≤—É—Ç {name}\n\
    –¢–µ–±–µ {years} –ª–µ—Ç, –≤—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=start_markup5())  # –¢–ê–ö–ñ–ï –í–ó–Ø–¢–¨ –ò–ó –ë–î
        connect.close()
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())

def verno(call):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status == 'member' or 'administrator' or 'creator':
        bot.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º!\n'
                                            '–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?', reply_markup=start_markup22())
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())


def novreg(call):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status == 'member' or 'administrator' or 'creator':
        bot.send_message(call.message.chat.id, '–•–æ—Ä–æ—à–æ, —Å–¥–µ–ª–∞–µ–º —Ç–µ–±–µ –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É!\n'
                                            '–î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–≤–æ–∏–º –ø–æ–ª–æ–º',
                        reply_markup=start_markup6())  # –°–î–ï–õ–ê–¢–¨ –ü–û–õ–ù–û–°–¢–¨–Æ –ù–û–í–†–ï–ì –ö–†–û–ú–ï ID
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())
    
def restart(message):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member':
        bot.send_message(message.chat.id, '–î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–≤–æ–∏–º –ø–æ–ª–æ–º', reply_markup=start_markup6()) 
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())
    
def check(call):
    status = ['creator', 'administrator', 'member']
    for i in status:
        if i == bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status:
            markup = types.InlineKeyboardMarkup(row_width=True)
            btn1 = types.InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
            markup.add(btn1)
            bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=markup)
            break
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=start_markup())
        

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data == 'check':
            check(call)
            
    if call.data == "mailing":
        mes_mailing = bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        bot.register_next_step_handler(mes_mailing, mailing)
        
    if call.data == '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å':
        status = ['creator', 'administrator', 'member']
        for i in status:
            if i == bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status:
                start(call.message)
                break
        else:
            bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())
        
    if call.data == '–ø–∞—Ä–Ω–∏':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS interest_id(
        id INTEGER, interest TEXT
        )""")
        connect.commit()
        cursor.execute(f"SELECT id FROM interest_id WHERE id = {call.message.chat.id}")
        data = cursor.fetchone()
        if data is None:
            # add values in fields
            cursor.execute("INSERT INTO interest_id VALUES(?, ?);", (call.message.chat.id, "–ü–∞—Ä–Ω–∏"))
            connect.commit()
        connect.close()
        kurs1(call)

    if call.data == '–¥–µ–≤—É—à–∫–∏':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS interest_id(
        id INTEGER, interest TEXT
        )""")
        connect.commit()
        cursor.execute(f"SELECT id FROM interest_id WHERE id = {call.message.chat.id}")
        data = cursor.fetchone()
        if data is None:
            # add values in fields
            cursor.execute("INSERT INTO interest_id VALUES(?, ?);", (call.message.chat.id, "–î–µ–≤—É—à–∫–∏"))
            connect.commit()
        connect.close()
        kurs1(call)

    if call.data == '–≤—Å–µ —Ä–∞–≤–Ω–æ':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS interest_id(
        id INTEGER, interest TEXT
        )""")
        connect.commit()
        cursor.execute(f"SELECT id FROM interest_id WHERE id = {call.message.chat.id}")
        data = cursor.fetchone()
        if data is None:
            # add values in fields
            cursor.execute("INSERT INTO interest_id VALUES(?, ?);", (call.message.chat.id, "–í—Å–µ —Ä–∞–≤–Ω–æ"))
            connect.commit()
        connect.close()
        kurs1(call)

    if call.data == '–ø–æ–ª1':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS sex_id(
        id INTEGER, sex TEXT
        )""")
        connect.commit()
        cursor.execute(f"SELECT id FROM sex_id WHERE id = {call.message.chat.id}")
        data = cursor.fetchone()
        if data is None:
            # add values in fields
            cursor.execute("INSERT INTO sex_id VALUES(?, ?);", (call.message.chat.id, "–ü–∞—Ä–µ–Ω—å"))
            connect.commit()
        connect.close()
        interes(call)
            
    if call.data == '–ø–æ–ª2':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS sex_id(
        id INTEGER, sex TEXT
        )""")
        connect.commit()
        cursor.execute(f"SELECT id FROM sex_id WHERE id = {call.message.chat.id}")
        data = cursor.fetchone()
        if data is None:
            # add values in fields
            cursor.execute("INSERT INTO sex_id VALUES(?, ?);", (call.message.chat.id, "–î–µ–≤—É—à–∫–∞"))
            connect.commit()
        connect.close()
        interes(call)

    if call.data == '–¥–∞':
        anketa_list(call)
    if call.data == '–ø—Ä–æ—Å–º–æ—Ç—Ä–∞–Ω–∫–µ—Ç—ã':
        svoya_anketa(call)
    if call.data == '–Ω–æ–≤–∞–Ω–∫–µ—Ç–∞':
        check3(call)
    if call.data == '–≤–µ—Ä–Ω–æ':
        verno(call)
    if call.data == '–Ω–æ–≤—Ä–µ–≥':
        novreg(call)
    if call.data == '–ø–æ–ª3':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS sex_id(
        id INTEGER, sex TEXT
        )""")
        connect.commit()
        cursor.execute(f"SELECT id FROM sex_id WHERE id = {call.message.chat.id}")
        data = cursor.fetchone()
        if data is not None:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            cursor.execute("UPDATE sex_id SET sex = ? WHERE id = ?", ("–ü–∞—Ä–µ–Ω—å", call.message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
            connect.commit()
            interes1(call)
        else:
            # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç
            cursor.execute("INSERT INTO sex_id VALUES(?, ?);", (call.message.chat.id, "–ü–∞—Ä–µ–Ω—å")) #–∑–∞–ø–∏—Å—å
            connect.commit()
            interes1(call)
            
    if call.data == '–ø–æ–ª4':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS sex_id(
        id INTEGER, sex TEXT
        )""")
        connect.commit()
        cursor.execute(f"SELECT id FROM sex_id WHERE id = {call.message.chat.id}")
        data = cursor.fetchone()
        if data is not None:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            cursor.execute("UPDATE sex_id SET sex = ? WHERE id = ?", ("–î–µ–≤—É—à–∫–∞", call.message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
            connect.commit()
            interes1(call)
        else:
            # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç
            cursor.execute("INSERT INTO sex_id VALUES(?, ?);", (call.message.chat.id, "–î–µ–≤—É—à–∫–∞")) #–∑–∞–ø–∏—Å—å
            connect.commit()
            interes1(call)
            
    if call.data == '–ø–∞—Ä–Ω–∏1': #—è –∞–ø–¥–µ–π—Ç
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS interest_id(
        id INTEGER, interest TEXT
        )""")
        connect.commit()
        cursor.execute(f"SELECT id FROM interest_id WHERE id = {call.message.chat.id}")
        data = cursor.fetchone()
        if data is not None:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            cursor.execute("UPDATE interest_id SET interest = ? WHERE id = ?", ("–ü–∞—Ä–Ω–∏", call.message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
            connect.commit()
            kurs_update(call)
        else:
            # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç
            cursor.execute("INSERT INTO interest_id VALUES(?, ?);", (call.message.chat.id, "–ü–∞—Ä–Ω–∏")) #–∑–∞–ø–∏—Å—å
            connect.commit()
            kurs_update(call)
        
            
    if call.data == '–¥–µ–≤—É—à–∫–∏1': #—è –∞–ø–¥–µ–π—Ç
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS interest_id(
        id INTEGER, interest TEXT
        )""")
        connect.commit()
        cursor.execute(f"SELECT id FROM interest_id WHERE id = {call.message.chat.id}")
        data = cursor.fetchone()
        if data is not None:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            cursor.execute("UPDATE interest_id SET interest = ? WHERE id = ?", ("–î–µ–≤—É—à–∫–∏", call.message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
            connect.commit()
            kurs_update(call)
        else:
            # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç
            cursor.execute("INSERT INTO interest_id VALUES(?, ?);", (call.message.chat.id, "–î–µ–≤—É—à–∫–∏")) #–∑–∞–ø–∏—Å—å
            connect.commit()
            kurs_update(call)    
        
            
    if call.data == '–≤—Å–µ —Ä–∞–≤–Ω–æ1':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS interest_id(
        id INTEGER, interest TEXT
        )""")
        connect.commit()
        cursor.execute(f"SELECT id FROM interest_id WHERE id = {call.message.chat.id}")
        data = cursor.fetchone()
        if data is not None:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            cursor.execute("UPDATE interest_id SET interest = ? WHERE id = ?", ("–í—Å–µ —Ä–∞–≤–Ω–æ", call.message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
            connect.commit()
            kurs_update(call)
        else:
            # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç
            cursor.execute("INSERT INTO interest_id VALUES(?, ?);", (call.message.chat.id, "–í—Å–µ —Ä–∞–≤–Ω–æ")) #–∑–∞–ø–∏—Å—å
            connect.commit()
            kurs_update(call)

    if call.data == '–ø–∞—Ä–Ω–∏2':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS interest_id(
        id INTEGER, interest TEXT
        )""")
        connect.commit()
        cursor.execute(f"SELECT id FROM interest_id WHERE id = {call.message.chat.id}")
        data = cursor.fetchone()
        if data is not None:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            cursor.execute("UPDATE interest_id SET interest = ? WHERE id = ?", ("–ü–∞—Ä–Ω–∏", call.message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
            connect.commit()
        connect.close()
        kurs2(call)
            
    if call.data == '–¥–µ–≤—É—à–∫–∏2':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS interest_id(
        id INTEGER, interest TEXT
        )""")
        connect.commit()
        cursor.execute(f"SELECT id FROM interest_id WHERE id = {call.message.chat.id}")
        data = cursor.fetchone()
        if data is not None:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            cursor.execute("UPDATE interest_id SET interest = ? WHERE id = ?", ("–î–µ–≤—É—à–∫–∏", call.message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
            connect.commit()
        connect.close()
        kurs2(call)
            
    if call.data == '–≤—Å–µ —Ä–∞–≤–Ω–æ2':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS interest_id(
        id INTEGER, interest TEXT
        )""")
        connect.commit()
        cursor.execute(f"SELECT id FROM interest_id WHERE id = {call.message.chat.id}")
        data = cursor.fetchone()
        if data is not None:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            cursor.execute("UPDATE interest_id SET interest = ? WHERE id = ?", ("–í—Å–µ —Ä–∞–≤–Ω–æ", call.message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
            connect.commit()
        connect.close()
        kurs2(call)
            
    if call.data == '–º–æ—è–∞–Ω–∫–µ—Ç–∞':
        svoya_anketa(call)
        
    if call.data == '–æ—Ü–µ–Ω–∫–∞':
        anketa_list(call)
            
    if call.data == '–ª–∞–π–∫':
        if bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status == 'member' or 'administrator' or 'creator':
            bot.send_message(call.message.chat.id, "–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞")
            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()
            cursor.execute("""CREATE TABLE IF NOT EXISTS like(
                        id INTEGER, like_id 
                    )""")
            cursor.execute("""CREATE TABLE IF NOT EXISTS vzaim_like(
                        id INTEGER, vzlike_id 
                    )""")
            cursor.execute(f"SELECT drugie_id1 FROM like_dizlike WHERE id = ?", (call.message.chat.id,))
            like = [item[0] for item in cursor.fetchall()]
            like1 = like.pop(0)
            if 1 == 1:
                cursor.execute(f"SELECT like_id FROM like WHERE id = ?", (call.message.chat.id,))
                data_like = cursor.fetchone()
                print("–¥–∞—Ç–∞ –ª–∞–π–∫ –æ–±—ã—á–Ω—ã–π:", data_like)
                print("////////////")
                # –ò–∑–≤–ª–µ—á—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                if data_like:
                    data_like = data_like[0] 
                else:
                    data_like = ""
                print("–¥–∞—Ç–∞ –ª–∞–π–∫:", data_like)
                if not data_like:
                    cursor.execute("INSERT INTO like VALUES(?, ?);", (call.message.chat.id, like1))
                else:
                    cursor.execute(f"SELECT like_id FROM like WHERE id = ?", (call.message.chat.id,))
                    data_like1 = [item[0] for item in cursor.fetchall()]
                    data_like1_list = ','.join(map(str, data_like1))
                    if str(like1) in data_like1_list:
                        bot.send_message(call.message.chat.id, '–í—ã —Ä–∞–Ω–µ–µ —Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ –¥–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ.\n–ü–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n–û–∂–∏–¥–∞–π—Ç–µ!')
                    else:
                        print("426 —Å—Ç—Ä–æ–∫–∞")
                        like3 = f"{data_like}, {like1}"
                        cursor.execute("UPDATE like SET like_id = ? WHERE id = ?", (like3, call.message.chat.id))
                        connect.commit()
            if 2 == 2:
                cursor.execute(f"SELECT vzlike_id FROM vzaim_like WHERE id = ?", (call.message.chat.id,))
                vzlike = [item[0] for item in cursor.fetchall()]
                vzlike1 = ','.join(map(str, vzlike))
                if str(like1) not in vzlike1:
                    cursor.execute("INSERT INTO vzaim_like VALUES(?, ?);", (call.message.chat.id, like1))
                    bot.send_message(like1, '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å', reply_markup = vzanketa())
            print("LIKE1:", like1)
            like2 = ','.join(map(str, like))
            cursor.execute("UPDATE like_dizlike SET drugie_id1 = ? WHERE id = ?", (like2, call.message.chat.id))
            connect.commit()
            connect.close()
            anketa1(call.message.chat.id)
        else:
            bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())
        
    if call.data == '–¥–∏–∑–ª–∞–π–∫':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute(f"SELECT drugie_id1 FROM like_dizlike WHERE id = ?", (call.message.chat.id,))
        dizlike = [item[0] for item in cursor.fetchall()]
        dizlike.pop(0)
        dizlike1 = ','.join(map(str, dizlike))
        cursor.execute("UPDATE like_dizlike SET drugie_id1 = ? WHERE id = ?", (dizlike1, call.message.chat.id))
        connect.commit()
        connect.close()
        anketa1(call.message.chat.id)
        
    if call.data == '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        start_message(call)
        
    if call.data == 'üëç':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute(f"SELECT vz_ank FROM vzaim_ank WHERE id = ?", (call.message.chat.id,))
        anketa = [item[0] for item in cursor.fetchall()]
        num = anketa.pop(0)
        print("NUM", num)
        cursor.execute(f"SELECT photo FROM photo_id WHERE id = {call.message.chat.id}")
        data_photo = cursor.fetchone()
        photo_data = data_photo[0] #—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ –±–¥
        #–æ–±—å–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (inner join) 
        cursor.execute(f"SELECT years_id.years, sex_id.sex, name_id.name, kurs_id.kurs, interest_id.interest, description_id.description FROM name_id \
            INNER JOIN years_id ON name_id.id = years_id.id \
                INNER JOIN sex_id ON name_id.id = sex_id.id \
                    INNER JOIN kurs_id ON name_id.id = kurs_id.id \
                        INNER JOIN interest_id ON name_id.id = interest_id.id \
                            INNER JOIN description_id ON name_id.id = description_id.id \
                                WHERE name_id.id = {call.message.chat.id}")
        data_text = cursor.fetchone() #–º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü –±–¥
        if 2 == 2:
                cursor.execute(f"DELETE FROM vzaim_like WHERE id = {call.message.chat.id} and vzlike_id = {num}")
                cursor.execute(f"DELETE FROM vzaim_ank WHERE id = {call.message.chat.id} and vz_ank = {num}")
                cursor.execute(f"SELECT like_id FROM like WHERE id = ?", (num,))
                likee10 = cursor.fetchone()[0]
                print("LIKEE10:", likee10)
                if len(str(likee10) )> 11:
                    likee = list(map(int, likee10.split(',')))
                    if likee is not None:
                        likee.remove(call.message.chat.id)
                        likee1 = ','.join(map(str, likee))
                        cursor.execute("UPDATE like SET like_id = ? WHERE id = ?", (likee1, num))
                        connect.commit()
                else:
                    cursor.execute(f"DELETE FROM like WHERE id = {num}")
                connect.commit()
        if data_text is not None:
            years, sex, name, kurs, interest, description = data_text 
            message_text = f"{name} {years} ({sex})\n–ö—É—Ä—Å: {kurs}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interest}\n–û —Å–µ–±–µ: {description}\n"
            bot.send_photo(num, photo = photo_data, caption = message_text)
            if 1 == 1:
                bot.send_message(num,f"–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! -> @{call.message.chat.username}", reply_markup=vzanketa1())
        if 2 == 2:
            cursor.execute(f"SELECT photo FROM photo_id WHERE id = {num}")
            data_photo1 = cursor.fetchone()
            photo_data1 = data_photo1[0] #—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ –±–¥
            #–æ–±—å–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (inner join) 
            cursor.execute(f"SELECT years_id.years, sex_id.sex, name_id.name, kurs_id.kurs, interest_id.interest, description_id.description FROM name_id \
                INNER JOIN years_id ON name_id.id = years_id.id \
                    INNER JOIN sex_id ON name_id.id = sex_id.id \
                        INNER JOIN kurs_id ON name_id.id = kurs_id.id \
                            INNER JOIN interest_id ON name_id.id = interest_id.id \
                                INNER JOIN description_id ON name_id.id = description_id.id \
                                    WHERE name_id.id = {num}")
            data_text1 = cursor.fetchone() #–º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü –±–¥
            if data_text1 is not None:
                years, sex, name, kurs, interest, description = data_text1 
                message_text1 = f"{name} {years} ({sex})\n–ö—É—Ä—Å: {kurs}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interest}\n–û —Å–µ–±–µ: {description}\n"
                bot.delete_message(call.message.chat.id, call.message.id)
                bot.send_photo(call.message.chat.id, photo = photo_data1, caption = message_text1)
                if 3 == 3:
                    chat_info = bot.get_chat(num)
                    user_name = chat_info.username
                    bot.send_message(call.message.chat.id,f"–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! -> @{user_name}", reply_markup=vzanketa1())
        connect.close()

    if call.data == 'üëé':
        dizl = 2
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute(f"SELECT vz_ank FROM vzaim_ank WHERE id = ?", (call.message.chat.id,))
        anketa = [item[0] for item in cursor.fetchall()]
        num = anketa.pop(0)
        if 2 == 2:
                cursor.execute(f"DELETE FROM vzaim_like WHERE id = {call.message.chat.id} and vzlike_id = {num}")
                cursor.execute(f"DELETE FROM vzaim_ank WHERE id = {call.message.chat.id} and vz_ank = {num}")
                cursor.execute(f"SELECT like_id FROM like WHERE id = ?", (num,))
                likee10 = cursor.fetchone()[0]
                if len(str(likee10) )> 11:
                    likee = list(map(int, likee10.split(',')))
                    if likee is not None:
                        likee.remove(call.message.chat.id)
                        likee1 = ','.join(map(str, likee))
                        cursor.execute("UPDATE like SET like_id = ? WHERE id = ?", (likee1, num))
                        connect.commit()
                    connect.commit()
                else:
                    cursor.execute(f"DELETE FROM like WHERE id = {num}")
        connect.close()
        vzlike_ank(call.message, dizl)

@bot.message_handler(content_types=['text'])
def vzlike_ank(message, dizl=None):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member' or 'administrator' or 'creator':
        try:
            if (dizl == 2) or (message and message.text.lower() == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª–∏"):
                connect = sqlite3.connect('users.db')
                cursor = connect.cursor()  
                cursor.execute("""CREATE TABLE IF NOT EXISTS vzaim_ank(
                            id INTEGER, vz_ank 
                        )""")
                cursor.execute(f"SELECT id FROM vzaim_like WHERE vzlike_id = ?", (message.chat.id,))
                vzlike1 = [item[0] for item in cursor.fetchall()]
                try:
                    num = vzlike1.pop(0)
                    if 1 == 1:
                        cursor.execute(f"DELETE FROM vzaim_like WHERE vzlike_id = ? and id =?", (message.chat.id, num))
                        connect.commit()
                    if 2 == 2:
                        cursor.execute(f"SELECT vz_ank FROM vzaim_ank WHERE id = ?", (message.chat.id,))
                        vzank = [item[0] for item in cursor.fetchall()]
                        if num not in vzank:
                            cursor.execute("INSERT INTO vzaim_ank VALUES(?, ?);", (message.chat.id, num))
                            connect.commit()
                    cursor.execute(f"SELECT photo FROM photo_id WHERE id = {num}")
                    data_photo = cursor.fetchone()
                    photo_data = data_photo[0] #—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ –±–¥
                    #–æ–±—å–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (inner join) 
                    cursor.execute(f"SELECT years_id.years, sex_id.sex, name_id.name, kurs_id.kurs, interest_id.interest, description_id.description FROM name_id \
                        INNER JOIN years_id ON name_id.id = years_id.id \
                            INNER JOIN sex_id ON name_id.id = sex_id.id \
                                INNER JOIN kurs_id ON name_id.id = kurs_id.id \
                                    INNER JOIN interest_id ON name_id.id = interest_id.id \
                                        INNER JOIN description_id ON name_id.id = description_id.id \
                                            WHERE name_id.id = {num}")
                    data_text = cursor.fetchone() #–º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü –±–¥
                    if data_text is not None:
                        if vzlike1 is not None:
                            years, sex, name, kurs, interest, description = data_text 
                            message_text = f"{name} {years} ({sex})\n–ö—É—Ä—Å: {kurs}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interest}\n–û —Å–µ–±–µ: {description}"
                            bot.send_photo(message.chat.id, photo = photo_data, caption = message_text, reply_markup=grade_anketa1())         
                except:
                    bot.send_message(message.chat.id, f'–ê–Ω–∫–µ—Ç –Ω–µ—Ç!\n–û—Ü–µ–Ω–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –≤—ã, –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ü–µ–Ω–∫–∞ –±—É–¥–µ—Ç –≤–∑–∞–∏–º–Ω–æ–π!', reply_markup=start_anketa())
        except:
            bot.send_message(message.chat.id, '–í–∞—à—É –∞–Ω–∫–µ—Ç—É –Ω–µ –º–æ–≥ –Ω–∏–∫—Ç–æ –æ—Ü–µ–Ω–∏—Ç—å.\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!')
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())



# –ù–ò–ñ–ï –ù–£–ñ–ù–û –°–î–ï–õ–ê–¢–¨ –ó–ê–ü–ò–°–ò –í –ë–î

def start_message(call):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status == 'member' or 'administrator' or 'creator':
        bot.send_message(call.message.chat.id, '–î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–≤–æ–∏–º –ø–æ–ª–æ–º', reply_markup=start_markup3())
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())

def interes(call):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status == 'member' or 'administrator' or 'creator':
        bot.send_message(call.message.chat.id, '–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?', reply_markup=start_markup2())
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())


def kurs1(call):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status == 'member' or 'administrator' or 'creator':
        msg = bot.send_message(call.message.chat.id, '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        bot.register_next_step_handler(msg, age)
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())


def age(message):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member' or 'administrator' or 'creator':
        if message.text:
            if (message.text.isalpha()) and (len(message.text)<17):   #ISALPHA –ü–†–û–í–ï–†–Ø–ï–¢ –¢–û–õ–¨–ö–û –ò–ó –ë–£–ö–í –°–û–°–¢–û–ò–¢ –°–¢–†–û–ö–ê –ò–õ–ò –ù–ï–¢
                connect = sqlite3.connect('users.db')
                cursor = connect.cursor()
                cursor.execute("""CREATE TABLE IF NOT EXISTS name_id(
                id INTEGER, name TEXT
                )""")
                connect.commit()
                cursor.execute(f"SELECT id FROM name_id WHERE id = {message.chat.id}")
                data = cursor.fetchone()
                if data is None:
                    # add values in fields
                    cursor.execute("INSERT INTO name_id VALUES(?, ?);", (message.chat.id, message.text))
                    connect.commit()
                    connect.close()
                msg4 = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
                bot.register_next_step_handler(msg4, course)
            else:
                bug10 = bot.send_message(message.chat.id, '–í –∏–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤!\n'
                                                        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –±–µ–∑ —Ü–∏—Ñ—Ä')
                bot.register_next_step_handler(bug10, age)
        else:
            bug = bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç')
            bot.register_next_step_handler(bug, age)
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())


def course(message):            # –µ—Å–ª–∏ —Ç–∏–ø –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ü–∏—Ñ—Ä—ã! –µ–±–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫—É!!
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member' or 'administrator' or 'creator':
        if message.text:
            if (message.text.isdigit()) and (len(message.text)<3) and (len(message.text)>1):    #–ö–ê–ö –Ø –ü–û–ù–Ø–õ ISDIGIT –ü–†–û–í–ï–†–Ø–ï–¢ –¢–û–õ–¨–ö–û –¶–ò–§–†–´ –í –°–û–û–ë–©–ï–ù–ò–ò –ò–õ–ò –ù–ï–¢
                connect = sqlite3.connect('users.db')
                cursor = connect.cursor()
                cursor.execute("""CREATE TABLE IF NOT EXISTS years_id(
                id INTEGER, years INTEGER
                )""")
                connect.commit()
                cursor.execute(f"SELECT id FROM years_id WHERE id = {message.chat.id}")
                data = cursor.fetchone()
                if data is None:
                    # add values in fields
                    cursor.execute("INSERT INTO years_id VALUES(?, ?);", (message.chat.id, message.text))
                    connect.commit()
                    connect.close()
                msg5 = bot.send_message(message.chat.id, '–° –∫–∞–∫–æ–≥–æ —Ç—ã –∫—É—Ä—Å–∞?')
                bot.register_next_step_handler(msg5, bio)
            else:
                bug = bot.send_message(message.chat.id, '–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –ª–∏–±–æ –≤—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã!\n–û—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ')
                bot.register_next_step_handler(bug, course)
        else:
            bug = bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç')
            bot.register_next_step_handler(bug, course)
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())

def bio(message):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member' or 'administrator' or 'creator':
        if message.text:
            if (message.text.isdigit()) and (len(message.text)<2):
                connect = sqlite3.connect('users.db')
                cursor = connect.cursor()
                cursor.execute("""CREATE TABLE IF NOT EXISTS kurs_id(
                id INTEGER, kurs INTEGER
                )""")
                connect.commit()
                cursor.execute(f"SELECT id FROM kurs_id WHERE id = {message.chat.id}")
                data = cursor.fetchone()
                if data is None:
                    # add values in fields
                    cursor.execute("INSERT INTO kurs_id VALUES(?, ?);", (message.chat.id, message.text))
                    connect.commit()
                    connect.close()
                msg6 = bot.send_message(message.chat.id, '–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ!\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é.')
                bot.register_next_step_handler(msg6, photos)
            else:
                bug1 = bot.send_message(message.chat.id, '–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –ª–∏–±–æ —Ç–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n'
                                                        '–û—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∏–ª–∏ –≤–µ—Ä–Ω—ã–π –∫—É—Ä—Å')
                bot.register_next_step_handler(bug1, bio)
        else:
            bug = bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ –≤—ã –∫—É—Ä—Å–∞')
            bot.register_next_step_handler(bug, bio)
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())
        
def photos(message):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member' or 'administrator' or 'creator':
        if message.text:
            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()
            cursor.execute("""CREATE TABLE IF NOT EXISTS description_id(
            id INTEGER, description TEXT
            )""")
            connect.commit()
            cursor.execute(f"SELECT id FROM description_id WHERE id = {message.chat.id}")
            data = cursor.fetchone()
            if data is None:
                # add values in fields
                cursor.execute("INSERT INTO description_id VALUES(?, ?);", (message.chat.id, message.text))
                connect.commit()
                connect.close()
            msg7 = bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!')
            bot.register_next_step_handler(msg7, photoss)
        else:
            bug = bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ')
            bot.register_next_step_handler(bug, photos)
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
def photoss(message):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member' or 'administrator' or 'creator':
        if message.photo: #–ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ
            file_info = bot.get_file(message.photo[-1].file_id)
            if file_info is not None:
                connect = sqlite3.connect('users.db')
                cursor = connect.cursor()
                cursor.execute("""CREATE TABLE IF NOT EXISTS photo_id(
                    id INTEGER, photo BLOB
                )""")
                connect.commit()
                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ –∞–π–¥–∏
                cursor.execute(f"SELECT id FROM photo_id WHERE id = {message.chat.id}")
                data = cursor.fetchone()
                if data is None:
                    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–¥ —Ñ–æ—Ç–æ –∏ –∞–π–¥–∏
                    downloaded_file = bot.download_file(file_info.file_path)
                    cursor.execute("INSERT INTO photo_id (id, photo) VALUES (?, ?);", (message.chat.id, downloaded_file))
                    connect.commit()
                cursor.execute(f"SELECT photo FROM photo_id WHERE id = {message.chat.id}")
                bot.send_message(message.chat.id, '–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ!', reply_markup=start_anketa())
                connect.close()
        else:
            bug = bot.send_message(message.chat.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ!')
            bot.register_next_step_handler(bug, photoss)
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())

def svoya_anketa(call): #–∞–Ω–∫–µ—Ç–∞
    if bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status == 'member' or 'administrator' or 'creator':
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute(f"SELECT photo FROM photo_id WHERE id = {call.message.chat.id}")
        data_photo = cursor.fetchone()
        if data_photo is not None: #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –ø–æ –∞–π–¥–∏
            photo_data = data_photo[0] #—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ –±–¥
            #–æ–±—å–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (inner join) 
            cursor.execute(f"SELECT years_id.years, sex_id.sex, name_id.name, kurs_id.kurs, interest_id.interest, description_id.description FROM name_id \
                INNER JOIN years_id ON name_id.id = years_id.id \
                    INNER JOIN sex_id ON name_id.id = sex_id.id \
                        INNER JOIN kurs_id ON name_id.id = kurs_id.id \
                            INNER JOIN interest_id ON name_id.id = interest_id.id \
                                INNER JOIN description_id ON name_id.id = description_id.id \
                                    WHERE name_id.id = {call.message.chat.id}")
            data_text = cursor.fetchone() #–º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü –±–¥
            if data_text is not None:
                years, sex, name, kurs, interest, description = data_text 
                message_text = f"{name} {years} ({sex})\n–ö—É—Ä—Å: {kurs}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interest}\n–û —Å–µ–±–µ: {description}"
                bot.send_message(call.message.chat.id, '–í–æ—Ç –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞!')
                bot.send_photo(call.message.chat.id, photo = photo_data, caption = message_text, reply_markup = dlya_moya_anketa())
                connect.close()
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())
            
#–ß–¢–û–ë–´ –í–°–Ø –≠–¢–ê –•–£–ô–ù–Ø –°–ù–ò–ó–£ –†–ê–ë–û–¢–ê–õ–ê, –ù–ê–î–û –ß–¢–û–ë–´ –í ANKETA_ID5 –í–°–ï–ì–î–ê –ë–´–õ–ê –û–î–ù–ê –°–¢–†–û–ö–ê –° –ó–ê–ü–û–õ–ù–ï–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò!!!
            
def anketa_list(call):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status == 'member' or 'administrator' or 'creator':
        chat_id = call.message.chat.id
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute(f"SELECT interest FROM interest_id WHERE id = {chat_id}")
        data = cursor.fetchone()
        if data is not None:
            data_1 = str(data[0])
            print("data_1: ", data_1)
            if data_1 == "–ü–∞—Ä–Ω–∏":
                cursor.execute(f"SELECT id FROM sex_id WHERE sex = ? AND id != ?", ('–ü–∞—Ä–µ–Ω—å', call.message.chat.id))
                result_list = [item[0] for item in cursor.fetchall()]
                random.shuffle(result_list)
                print("result_list1: ", result_list)
                anketa_p(chat_id, result_list)
            elif data_1 == "–î–µ–≤—É—à–∫–∏":
                cursor.execute(f"SELECT id FROM sex_id WHERE sex = ? AND id != ?", ('–î–µ–≤—É—à–∫–∞', chat_id))
                result_list = [item[0] for item in cursor.fetchall()]
                random.shuffle(result_list)
                print("result_list2: ", result_list)
                anketa_p(chat_id, result_list)
            elif data_1 == "–í—Å–µ —Ä–∞–≤–Ω–æ":
                cursor.execute(f"SELECT id FROM sex_id WHERE id != ?", (chat_id))
                result_list = [item[0] for item in cursor.fetchall()]
                random.shuffle(result_list)
                print("result_list3: ", result_list)
                anketa_p(chat_id, result_list)
            connect.close()
        else:
            bot.send_message(call.message.chat.id, '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—å—é!')
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())
        
def anketa_p(chat_id, result_list):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=chat_id).status == 'member' or 'administrator' or 'creator':
        print("result_list_anketa_p: ", result_list)
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS anketa_id5(
                    id INTEGER, drugie_id 
                )""")
        result_list2 =  ','.join(map(str, result_list)) #–î–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫—É –∏–∑ id —É–±—Ä–∞–≤ —Å–ø–∏—Å–æ–∫, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–¥
        cursor.execute(f"SELECT id FROM anketa_id5 WHERE id = ?", (chat_id,))
        id_polz = cursor.fetchone()
        if id_polz is None:
            cursor.execute("INSERT INTO anketa_id5 (id, drugie_id) VALUES (?, ?);", (chat_id, result_list2))
        cursor.execute(f"SELECT drugie_id FROM anketa_id5 WHERE id =?;", (chat_id,))
        drugie_id_polz = [item[0] for item in cursor.fetchall()]
        if len(drugie_id_polz) < 3: #–ü–û–ß–ï–ú–£-–¢–û –ù–ï –°–†–ê–ë–ê–¢–´–í–ê–ï–¢ (–ú–û–ñ–ù–û –°–ù–ê–ß–ê–õ–ê –ü–†–û–°–¢–û –ó–ê–ü–û–õ–ù–ò–¢–¨ –°–î–ï–õ–ê–í 12 == drugie_id_polz) –ù–û –ü–û–õ–°–ï –¢–û–ì–û, –ö–ê–ö –°–ù–û–í–ê –°–¢–ê–ù–ï–¢ –ü–£–°–¢–û–ô –ù–ê–î–û –ó–ê–ü–û–õ–ù–ò–¢–¨ –°–£–ö–ê!!
            cursor.execute("UPDATE anketa_id5 SET drugie_id = ? WHERE id = ?", (result_list2, chat_id))
            connect.commit()
        connect.close()
        anketa1(chat_id)
    else:
        bot.send_message(chat_id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())


def anketa1(chat_id):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=chat_id).status == 'member' or 'administrator' or 'creator':
        try:
            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()
            cursor.execute("""CREATE TABLE IF NOT EXISTS like_dizlike(
                    id INTEGER, drugie_id1 
                )""")
            cursor.execute(f"SELECT drugie_id FROM anketa_id5 WHERE id = ?", (chat_id,))
            anketa = cursor.fetchone()[0]
            if anketa is not None:
                sanketa = list(map(int, anketa.split(',')))
                random.shuffle(sanketa)
            if sanketa is not None:
                num = sanketa.pop(0) # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —É–¥–∞–ª—è–µ–º –µ–µ –≤ —Å–ø–∏—Å–∫–µ
                if 2 == 2:
                    cursor.execute(f"SELECT drugie_id1 FROM like_dizlike WHERE id = ?", (chat_id,))
                    num1 = [item[0] for item in cursor.fetchall()]
                    cursor.execute(f"SELECT id FROM like_dizlike")
                    idnum = [item[0] for item in cursor.fetchall()]
                    if (len(num1) < 3) and (chat_id not in idnum):
                        cursor.execute("INSERT INTO like_dizlike (id, drugie_id1) VALUES (?, ?)", (chat_id, num))
                    if chat_id in idnum:
                        cursor.execute("UPDATE like_dizlike SET drugie_id1 = ? WHERE id = ?", (num, chat_id))
                        connect.commit()
                if 1 == 1:
                    sanketa1 =  ','.join(map(str, sanketa))
                    cursor.execute("UPDATE anketa_id5 SET drugie_id = ? WHERE id = ?", (sanketa1, chat_id))
                    connect.commit()
                connect = sqlite3.connect('users.db')
                cursor = connect.cursor()
                cursor.execute(f"SELECT photo FROM photo_id WHERE id = {num}")
                data_photo = cursor.fetchone()
                photo_data = data_photo[0] #—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ –±–¥
                #–æ–±—å–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (inner join) 
                cursor.execute(f"SELECT years_id.years, sex_id.sex, name_id.name, kurs_id.kurs, interest_id.interest, description_id.description FROM name_id \
                    INNER JOIN years_id ON name_id.id = years_id.id \
                        INNER JOIN sex_id ON name_id.id = sex_id.id \
                            INNER JOIN kurs_id ON name_id.id = kurs_id.id \
                                INNER JOIN interest_id ON name_id.id = interest_id.id \
                                    INNER JOIN description_id ON name_id.id = description_id.id \
                                        WHERE name_id.id = {num}")
                data_text = cursor.fetchone() #–º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü –±–¥
                if data_text is not None:
                    if sanketa is not None:
                        years, sex, name, kurs, interest, description = data_text 
                        message_text = f"{name} {years} ({sex})\n–ö—É—Ä—Å: {kurs}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interest}\n–û —Å–µ–±–µ: {description}"
                        bot.send_photo(chat_id, photo = photo_data, caption = message_text, reply_markup=grade_anketa())
                    else:
                        bot.send_message(chat_id, '–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!')    
            else:
                bot.send_message(chat_id, '–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!')
        except:
            bot.send_message(chat_id, '–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!', reply_markup=start_anketa()) 
    else:
        bot.send_message(chat_id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())

# –ü–†–ò –û–¢–í–ï–¢–ï –í–°–ï –í–ï–†–ù–û
def kurs2(call):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status == 'member' or 'administrator' or 'creator':
        novmsg2 = bot.send_message(call.message.chat.id, '–° –∫–∞–∫–æ–≥–æ —Ç—ã –∫—É—Ä—Å–∞?')
        bot.register_next_step_handler(novmsg2, novbio2)
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())


def novbio2(message):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member':
        if message.text:
            if (message.text.isdigit()) and (len(message.text) < 2):
                connect = sqlite3.connect('users.db')
                cursor = connect.cursor()
                cursor.execute("""CREATE TABLE IF NOT EXISTS kurs_id(
                id INTEGER, kurs TEXT
                )""")
                connect.commit()
                cursor.execute(f"SELECT id FROM kurs_id WHERE id = {message.chat.id}")
                data = cursor.fetchone()
                if data is not None:
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
                    cursor.execute("UPDATE kurs_id SET kurs = ? WHERE id = ?", (message.text, message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
                    connect.commit()
                    connect.close()
                novmsg26 = bot.send_message(message.chat.id, '–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ!\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é.')
                bot.register_next_step_handler(novmsg26, novphotos2)
            else:
                bug5 = bot.send_message(message.chat.id, '–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –ª–∏–±–æ —Ç–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
                                                        '–û—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∏–ª–∏ –≤–µ—Ä–Ω—ã–π –∫—É—Ä—Å')
                bot.register_next_step_handler(bug5 , novbio)
        else:
            bug = bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ –≤—ã –∫—É—Ä—Å–∞')
            bot.register_next_step_handler(bug, novbio2)
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())
        
def novphotos2(message):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member' or 'administrator' or 'creator':
        if message.text:
            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()
            cursor.execute("""CREATE TABLE IF NOT EXISTS description_id(
            id INTEGER, description TEXT
            )""")
            connect.commit()
            cursor.execute(f"SELECT id FROM description_id WHERE id = {message.chat.id}")
            data = cursor.fetchone()
            if data is not None:
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
                cursor.execute("UPDATE description_id SET description = ? WHERE id = ?", (message.text, message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
                connect.commit()
                connect.close()
            novmsg27 = bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!')
            bot.register_next_step_handler(novmsg27, novphotoss2)
        else:
            bug = bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ')
            bot.register_next_step_handler(bug, novphotos2)
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
def novphotoss2(message):  
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member' or 'administrator' or 'creator':
        if message.photo:     # –ü–†–û–í–ï–†–ö–ê, –ß–¢–û –û–¢–ü–†–ê–í–ò–õ–ò –ò–ú–ï–ù–ù–û –§–û–¢–û
            file_info = bot.get_file(message.photo[-1].file_id)
            if file_info is not None:
                connect = sqlite3.connect('users.db')
                cursor = connect.cursor()
                cursor.execute("""CREATE TABLE IF NOT EXISTS photo_id(
                    id INTEGER, photo BLOB
                )""")
                connect.commit()
                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ –∞–π–¥–∏
                cursor.execute(f"SELECT id FROM photo_id WHERE id = {message.chat.id}")
                data = cursor.fetchone()
                if data is not None:
                    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–¥ —Ñ–æ—Ç–æ –∏ –∞–π–¥–∏
                    downloaded_file = bot.download_file(file_info.file_path)
                    cursor.execute("UPDATE photo_id SET photo = ? WHERE id = ?", (downloaded_file, message.chat.id))
                    connect.commit()
                connect.close()
                bot.send_message(message.chat.id, '–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ!', reply_markup=start_anketa())
        else:
            bug = bot.send_message(message.chat.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ!')
            bot.register_next_step_handler(bug, novphotoss2)
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())
        
#–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–£–Æ–°–¨ –ó–ê–ù–û–í–û!

def interes1(call):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status == 'member' or 'administrator' or 'creator':
        bot.send_message(call.message.chat.id, '–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?', reply_markup=start_markup7())
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())


def kurs_update(call):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=call.message.chat.id).status == 'member' or 'administrator' or 'creator':
        novmsg = bot.send_message(call.message.chat.id, '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        bot.register_next_step_handler(novmsg, novage)
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())


def novage(message):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member' or 'administrator' or 'creator':
        if message.text:
            if (message.text.isalpha()) and (len(message.text)<15):
                connect = sqlite3.connect('users.db')
                cursor = connect.cursor()
                cursor.execute("""CREATE TABLE IF NOT EXISTS name_id(
                id INTEGER, name TEXT
                )""")
                connect.commit()
                cursor.execute(f"SELECT id FROM name_id WHERE id = {message.chat.id}")
                data = cursor.fetchone()
                if data is not None:
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
                    cursor.execute("UPDATE name_id SET name = ? WHERE id = ?", (message.text, message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
                    connect.commit()
                else:
                    cursor.execute("INSERT INTO name_id VALUES(?, ?);", (message.chat.id, message.text)) #–∑–∞–ø–∏—Å—å
                    connect.commit()
                connect.close()
                novmsg4 = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
                bot.register_next_step_handler(novmsg4, novcourse)

            else:
                bug11 = bot.send_message(message.chat.id, '–í –∏–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã.\n'
                                                        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –±–µ–∑ —Ü–∏—Ñ—Ä')
                bot.register_next_step_handler(bug11, novage)
        else:
            bug = bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç')
            bot.register_next_step_handler(bug, novage)
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())
        
def novcourse(message):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member' or 'administrator' or 'creator':
        if message.text:
            if (message.text.isdigit()) and (len(message.text)<3):
                connect = sqlite3.connect('users.db')
                cursor = connect.cursor()
                cursor.execute("""CREATE TABLE IF NOT EXISTS years_id(
                id INTEGER, years TEXT
                )""")
                connect.commit()
                cursor.execute(f"SELECT id FROM years_id WHERE id = {message.chat.id}")
                data = cursor.fetchone()
                if data is not None:
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
                    cursor.execute("UPDATE years_id SET years = ? WHERE id = ?", (message.text, message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
                    connect.commit()
                else:
                    cursor.execute("INSERT INTO years_id VALUES(?, ?);", (message.chat.id, message.text)) #–∑–∞–ø–∏—Å—å
                    connect.commit()
                novmsg5 = bot.send_message(message.chat.id, '–° –∫–∞–∫–æ–≥–æ —Ç—ã –∫—É—Ä—Å–∞?')
                bot.register_next_step_handler(novmsg5, novbio)
            else:
                bug3 = bot.send_message(message.chat.id, '–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –ª–∏–±–æ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!\n'
                                                        '–û—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –ª–∏–±–æ –≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
                bot.register_next_step_handler(bug3, novcourse)
        else:
            bug = bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç')
            bot.register_next_step_handler(bug, novcourse)
        connect.close()
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())

def novbio(message):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member' or 'administrator' or 'creator':
        if message.text:
            if (message.text.isdigit()) and (len(message.text) < 2):
                connect = sqlite3.connect('users.db')
                cursor = connect.cursor()
                cursor.execute("""CREATE TABLE IF NOT EXISTS kurs_id(
                id INTEGER, kurs TEXT
                )""")
                connect.commit()
                cursor.execute(f"SELECT id FROM kurs_id WHERE id = {message.chat.id}")
                data = cursor.fetchone()
                if data is not None:
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
                    cursor.execute("UPDATE kurs_id SET kurs = ? WHERE id = ?", (message.text, message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
                    connect.commit()
                else:
                    cursor.execute("INSERT INTO kurs_id VALUES(?, ?);", (message.chat.id, message.text)) #–∑–∞–ø–∏—Å—å
                    connect.commit()
                novmsg6 = bot.send_message(message.chat.id, '–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ!\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é.')
                bot.register_next_step_handler(novmsg6, novphotos)
            else:
                bug4 = bot.send_message(message.chat.id, '–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –ª–∏–±–æ —Ç–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n'
                                                        '–û—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∏–ª–∏ –≤–µ—Ä–Ω—ã–π –∫—É—Ä—Å')
                bot.register_next_step_handler(bug4, novbio)
        else:
            bug = bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ –≤—ã –∫—É—Ä—Å–∞')
            bot.register_next_step_handler(bug, novbio)
        connect.close()
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())
        
def novphotos(message):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member' or 'administrator' or 'creator':
        if message.text:
            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()
            cursor.execute("""CREATE TABLE IF NOT EXISTS description_id(
            id INTEGER, description TEXT
            )""")
            connect.commit()
            cursor.execute(f"SELECT id FROM description_id WHERE id = {message.chat.id}")
            data = cursor.fetchone()
            if data is not None:
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
                cursor.execute("UPDATE description_id SET description = ? WHERE id = ?", (message.text, message.chat.id)) #—è –∞–ø–¥–µ–π—Ç
                connect.commit()
            else:
                cursor.execute("INSERT INTO description_id VALUES(?, ?);", (message.chat.id, message.text)) #–∑–∞–ø–∏—Å—å
                connect.commit()
            novmsg7 = bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!')
            bot.register_next_step_handler(novmsg7, novphotoss)
        else:
            bug = bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ')
            bot.register_next_step_handler(bug, novphotos)
        connect.close()
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
def novphotoss(message):
    if bot.get_chat_member(chat_id='-1001720626187', user_id=message.chat.id).status == 'member' or 'administrator' or 'creator':
        if message.photo:     # –ü–†–û–í–ï–†–ö–ê, –ß–¢–û –û–¢–ü–†–ê–í–ò–õ–ò –ò–ú–ï–ù–ù–û –§–û–¢–û
            file_info = bot.get_file(message.photo[-1].file_id)
            if file_info is not None:
                connect = sqlite3.connect('users.db')
                cursor = connect.cursor()
                cursor.execute("""CREATE TABLE IF NOT EXISTS photo_id(
                    id INTEGER, photo BLOB
                )""")
                connect.commit()
                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ –∞–π–¥–∏
                cursor.execute(f"SELECT id FROM photo_id WHERE id = {message.chat.id}")
                data = cursor.fetchone()
                if data is not None:
                    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–¥ —Ñ–æ—Ç–æ –∏ –∞–π–¥–∏
                    downloaded_file = bot.download_file(file_info.file_path)
                    cursor.execute("UPDATE photo_id SET photo = ? WHERE id = ?", (downloaded_file, message.chat.id))
                    connect.commit()
                else:
                    downloaded_file = bot.download_file(file_info.file_path)
                    cursor.execute("INSERT INTO photo_id (id, photo) VALUES (?, ?);", (message.chat.id, downloaded_file))
                    connect.commit() #–∑–∞–ø–∏—Å—å
                bot.send_message(message.chat.id, '–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ!', reply_markup=start_anketa())
        else:
            bug = bot.send_message(message.chat.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ!')
            bot.register_next_step_handler(bug, novphotoss)
        connect.close()
    else:
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=proverka_markup())
            
bot.polling(none_stop=True)
